version: '2.4'

networks:
  # Same as the main docker composefor the devcontainer
  sindit_network:
    name: sindit_network

services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  sindit_devcontainer:
    build: .
    hostname: sindit-devcontainer
    container_name: sindit_devcontainer
    mem_limit: 2G
    networks:
      - sindit_network

    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks, 
    # debugging) to execute as the user. Uncomment the next line if you want the entire 
    # container to run as this user instead. Note that, on Linux, you may need to 
    # ensure the UID and GID of the container user you create matches your local user. 
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    # user: vscode


    volumes:
      # Mount the folder of your project
      - ..:/workspace:cached

      # Use Docker from inside the container. See https://aka.ms/vscode-remote/samples/docker-from-docker-compose for details.
      - /var/run/docker.sock:/var/run/docker.sock

    # Uncomment the next four lines if you will use a ptrace-based debugger like C++, Go, and Rust.
    # cap_add:
    #   - SYS_PTRACE
    # security_opt:
    #   - seccomp:unconfined

    # Overrides default command so things don't shut down after the process ends.
    command: /bin/sh -c "while sleep 1000; do :; done"

  sindit_influx_db_devcontainer:
    image: influxdb:2.2
    hostname: sindit-influx-db-devcontainer
    container_name: sindit_influx_db_devcontainer
    restart: unless-stopped
    mem_limit: 1G
    ports:
      - '8087:8086'
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=sindit_influxdb
      - DOCKER_INFLUXDB_INIT_PASSWORD=sindit_influxdb
      - DOCKER_INFLUXDB_INIT_ORG=sindit
      - DOCKER_INFLUXDB_INIT_BUCKET=sindit
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=sindit_influxdb_admin_token
    networks:
      - sindit_network
    volumes:
      - ./docker_mounted_storage/sindit_influx_db/data:/var/lib/influxdb2
      - ./docker_mounted_storage/sindit_influx_db/config:/etc/influxdb2
    healthcheck:
      test: "influx ping"
      interval: 5s
      timeout: 30s
      retries: 5

  sindit_neo4j_kg_devcontainer:
    image: neo4j:4.4.3-community
    hostname: sindit-neo4j-kg-devcontainer
    container_name: sindit_neo4j_kg_devcontainer
    mem_limit: 2G
    restart: unless-stopped
    ports:
      - 7474:7474
      - 7687:7687
    volumes:
      - ./docker_mounted_storage/sindit_neo4j_kg/conf:/var/lib/neo4j/conf/
      - ./docker_mounted_storage/sindit_neo4j_kg/logs:/logs
      - ./docker_mounted_storage/sindit_neo4j_kg/data:/data
    healthcheck:
      test: perl -MIO::Socket::INET -e 'exit(! defined( IO::Socket::INET->new("localhost:7687")))'
      interval: 10s
      timeout: 2s
      retries: 10
    networks:
      - sindit_network
    environment:
      - NEO4J_AUTH=none
      # Neo4J plugins for metamodel, similarity analysis, RDF semantics, ...
      - NEO4JLABS_PLUGINS=["apoc", "n10s", "graph-data-science", "streams"]
      # Allow the separate endpoint "/rdf" for RDF mappings
      - NEO4J_dbms_unmanaged__extension__classes=n10s.endpoint=/rdf
